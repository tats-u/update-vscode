#!/usr/bin/env python3

# Copyright 2016-2017 (C) Tats.U.
# This script is licensed under The MIT License.  See:
# https://opensource.org/licenses/MIT

# pylint: disable=C0103
"""Update script for Visual Studio Code
"""

import os
import sys
import argparse
import urllib
import urllib.request
import requests
import shutil
import tempfile
import subprocess
import enum
import distutils.version
import re


def confirm_default_yes(prompt):
    reply = input("{0}[Y/n]: ".format(prompt))
    return len(reply) == 0 or reply[0].lower() != "n"


def confirm_default_no(prompt):
    reply = input("{0}[y/N]: ".format(prompt))
    return len(reply) != 0 and reply[0].lower() == "y"

# instance_arg_parser = argparse.ArgumentParser()

PackageType = enum.Enum("PackageType", "deb rpm")

if os.path.isfile("/etc/lsb-release") or os.path.isfile("/etc/debian_version"):
    package_url = "https://go.microsoft.com/fwlink/?LinkID=760868"
    package_type = PackageType.deb
elif os.path.isfile("/etc/fedora-release") or os.path.isfile("/etc/redhat-release") or os.path.isfile("/etc/SuSE-release"):
    package_url = "https://go.microsoft.com/fwlink/?LinkID=760867"
    package_type = PackageType.rpm
else:
    print(
        "This system seems not to be Ubuntu, Debian, Fedora, RHEL, CentOS, or SuSE.",
        file=sys.stderr)
    exit(1)

print("Checking the latest version...", file=sys.stderr)
remote_version_check_request_result = requests.head(
    package_url, allow_redirects=True)
package_name = remote_version_check_request_result.url.split("/")[-1]
if package_type == PackageType.deb:
    remote_package_version = package_name.split("_")[1].split("-")[0]
else:
    remote_package_version = package_name.split("-")[1]

print("Checking the local version...", file=sys.stderr)
if package_type == PackageType.deb:
    local_package_version_check_request_result = subprocess.run(
        ["dpkg", "-l", "code"], stdout=subprocess.PIPE)
    if local_package_version_check_request_result.returncode == 0:
        line_filter_regexp = re.compile("^ii +")
        local_package_version_line = [l for l in
                                      local_package_version_check_request_result.stdout.decode(
                                      ).split("\n") if line_filter_regexp.match(l)][0]
        local_package_version = re.split(
            " +", local_package_version_line)[2].split("-")[0]
    else:
        local_package_version = None
else:
    local_package_version_check_request_result = subprocess.run(
        ["rpm", "-q", "code"], stdout=subprocess.PIPE)
    if local_package_version_check_request_result.returncode == 0:
        local_package_version = local_package_version_check_request_result.stdout.decode(
        ).rstrip("\n").split("-")[1]
    else:
        local_package_version = None

if local_package_version is not None:
    remote_package_version_comparator = distutils.version.LooseVersion(
        remote_package_version)
    local_package_version_comparator = distutils.version.LooseVersion(
        local_package_version)
    if remote_package_version_comparator == local_package_version_comparator:
        if not confirm_default_no(
                "It seems the latest version {version} has already been installed in this system.  "
                "Do you want to download and install it again?".format(
                    version=remote_package_version)):
            print("Existing.")
            exit(0)
    elif remote_package_version_comparator < local_package_version_comparator:
        print(
            "Something is wrong.  The local version is {local} "
            "but the remote version is {remote}.  Existing.".format(
                local=local_package_version,
                remote=remote_package_version),
            file=sys.stderr)
        exit(1)

working_directory = tempfile.TemporaryDirectory()
os.chdir(working_directory.name)
if shutil.which("aria2c") is not None:
    subprocess.run(["aria2c", package_url], check=True)
    package_name = os.listdir()[0]
else:
    with urllib.request.urlopen(package_url) as instance_request:
        package_name = instance_request.url.rsplit("/", 1)[-1].split("?", 1)[0]
        with open(os.path.join(working_directory.name, package_name), "wb") as instance_package:
            instance_package.write(instance_request.read())

if os.getuid() == 0:
    install_command = []
else:
    install_command = ["sudo"]

if package_type == PackageType.deb:
    gdebi_path = shutil.which("gdebi")
    if gdebi_path is None:
        install_command += ["dpkg", "-i"]
    else:
        install_command += ["gdebi", "-n"]
elif package_type == PackageType.rpm:
    dnf_path = shutil.which("dnf")
    if dnf_path is not None:
        install_command += ["dnf", "-y", "install"]
    else:
        yum_path = shutil.which("yum")
        if yum_path is not None:
            install_command += ["yum", "-y", "localinstall"]
        else:
            zypper_path = shutil.which("zypper")
            if zypper_path is not None:
                install_command += ["zypper", "-y", "install"]
            else:
                install_command += ["rpm", "-i"]

install_command.append(package_name)
subprocess.run(install_command, check=True)
